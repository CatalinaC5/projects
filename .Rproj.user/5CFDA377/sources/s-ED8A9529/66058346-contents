# Installs packages needed. A pop up may appear with Secure CRAN mirrors, 
# pick Germany (Munster) and click okay. This process only needs to be 
# done one time on each computer. You should always make sure packages are 
# stored on your own computer and not on onedrive or a temp folder. Also, 
# failure installing packages may sometimes be solved using R instead of R Studio. 
install.packages("raster")
install.packages("rgdal")

# If you get a message 'raster was built under R version 4.0.3' (or another version number) just ignore that

# Load the packages so they actually work. This process has to be done each time you open R again.

library(rgdal)
library(raster)

# Navigate to the root folder of your project. note, if you did not create the root project folder directly in the M folder, but in a sub folder, adjust that in the code! also note the direction of // . If you are using R Studio, you can also set the working directory by clicking Session (toolbar in the top), set working directory, choose directory, and navigate to the folder that contains your data.
setwd("C:/Users/PC/Desktop/Wildlife Conservation/Assignement_Monday_W2") # update to your own working directory!

# import the butterfly shapefile that you stored in the data/Butterflydata folder into R
Butterflies <- readOGR("data/Butterflydata", "Vlinderdata")

# Plot the Butterflies data check. Note that it may take long for the figure to display depending on the speed of you pc

plot(Butterflies)


# import the raster file with data on nitrogen deposition into R and plot it
N <- raster("data/Butterflydata/stikstofdepositie.tif")
plot(N)


# Check the CRS info

proj4string(Butterflies) # This is EPSG:4326, WGS84

proj4string(N) # This is EPSG:28992, RDnew

# Project Butterflies to RDnew (the output of the proj4string function for N)
Butterflies <- spTransform(Butterflies, proj4string(N))

# Plot
plot(N)
points(Butterflies)

# extract the nitrogen deposition values displayed in the raster file to the datapoints of the butterflies shapefile (the new column we call "Nitrogen")
Butterflies$Nitrogen <- extract(N, Butterflies)

# import the Natura2000 shapefile (from the data/Natura2000 folder: check the filename) into R
Natura2000 <- readOGR("data/Natura2000", "Natura2000_end2018_epsg3035")

# Project to RDnew

Natura2000 <- spTransform(Natura2000, proj4string(N))

# now clip the Nitrogen deposition raster to only display its values in the natura2000 sites (we call it "Nmasked" here) and plot it, overlaying it with the natura2000 sites
Nmasked <- mask(N, Natura2000)
plot(Nmasked)
plot(Natura2000, add=TRUE)

# extract the nitrogen deposition values for the Natura2000 areas at the butterfly locations (we assign it to a new column called "Natura2000")
Butterflies$Natura2000 <- extract(Nmasked, Butterflies)

# Outside Natura2000 areas, the new column "Natura2000" will now have value NA. Thus, we first reclassify values that are NA to the value 0, and all other values to the value 1. 0 thus means that the site is outside Natura2000, and 1 thus means that the site is inside the Natura2000 network. We use the function ifelse() for this, coupled with the function is.na(), which tests whether values are NA
Butterflies$Natura2000 <- ifelse(is.na(Butterflies$Natura2000), 0, 1)

# Get all data as a data.frame called "dat" (this will include the coordinates)
dat <- as.data.frame(Butterflies)

# Check whether rows contain NAs
table(complete.cases(dat)) # Some indeed do contain NAs, thus remove those rows

# get rid of the rows that lack values (NA), check the data
dat <- na.omit(dat)
head(dat)

# export the dataset, calling it "new_butterfly data"
write.table(dat, file="new_ butterfly data.csv", append=FALSE, sep= ",", row.names = FALSE, col.names=TRUE)
